#!/usr/bin/python3

import argparse


parser = argparse.ArgumentParser(
                    prog='ProgramName',
                    description='What the program does')

parser.add_argument('src_file', type=argparse.FileType('rb'), help='Source binary file')
parser.add_argument('out_file', type=argparse.FileType('w'), help='Output assembly file')
parser.add_argument('--section', type=str, help='Assembly file defines itself in this section')
parser.add_argument('--section-flags', type=str, help='Section flags to use')
parser.add_argument('--symbol', type=str, help='Mark data with a global symbol')
parser.add_argument('--bytes-per-line', type=int, default=16, help='Number of bytes to issue per assembly line')

args = parser.parse_args()

if args.section is not None:
    print(f".section {args.section}", end="", file=args.out_file)
    if args.section_flags is not None:
        print(f', "{args.section_flags}"', file=args.out_file)
    else:
        print(file=args.out_file)

if args.symbol is not None:
    print(f".global {args.symbol}", file=args.out_file)
    print(f"{args.symbol}:", file=args.out_file)

line_index = 0
while( b := args.src_file.read1(1) ):
    if line_index == 0:
        print(f"    .dc.b 0x{b.hex()}", end="", file=args.out_file)
    else:
        print(f", 0x{b.hex()}", end="", file=args.out_file)

    line_index = line_index+1
    if line_index == args.bytes_per_line:
        print(file=args.out_file)
        line_index = 0

if line_index != 0:
    print(file=args.out_file)
